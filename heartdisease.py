# -*- coding: utf-8 -*-
"""heartdisease.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1AhaTDmel4m2oVjVcLCjP8cqQuwd9ONMy

Importing the dependencies i.e. the libraries and fucntions we need for our project
"""

import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression

from sklearn.metrics import accuracy_score

"""Data collection and Processing"""

# loading the csv data to pandas data frame
heart_data = pd.read_csv('/content/heart.csv')

# print first 5 rows of dataset
heart_data.head()

# print last 5 rows of dataset
heart_data.tail()

# number of rows and column in dataset
heart_data.shape

# getting some information about data
heart_data.info()

# checking for missing values
heart_data.isnull().sum()

# statistical measure about  data
heart_data.describe()

# checking the distribution of target value
heart_data['target'].value_counts()

"""1 ----> unhealthy
0 ---->  healthy

Spliting the Features and target
"""

X = heart_data.drop(columns='target',axis=1)
Y = heart_data['target']

print(X)

print(Y)

"""Splitting the data into Trainig data and Testing data"""

X_train, X_test, Y_train, Y_test = train_test_split(X,Y,test_size=0.2, stratify = Y,random_state =2)
print(X.shape,X_train.shape,X_test.shape)

"""Model Training
Logistic Regression
"""

model = LogisticRegression()

# training the Logistic model with training data
model.fit(X_train,Y_train)

"""Model Evaluation


Accuracy Score
"""

# accuracy on training data
X_train_prediction = model.predict(X_train)
training_data_accuracy = accuracy_score(X_train_prediction, Y_train)

print('accuracy on training data:', training_data_accuracy)

# accuracy on test data
X_test_prediction = model.predict(X_test)
test_data_accuracy = accuracy_score(X_test_prediction, Y_test)

print('accuracy on training data:', test_data_accuracy)

"""Building a Predictive System"""

input_data = (62,0,1,138,294,1,1,106,0,1.9,2,3,6)
# change the input data to numpy array
input_data_as_numpy_array = np.asarray(input_data)

# reshaping the numpy array as we are only on instance
input_data_reshaped = input_data_as_numpy_array.reshape(1,-1)
prediction = model.predict(input_data_reshaped)
print(prediction)

if (prediction[0]==0):
  print('person has not heart disease')
else:
  print('person has heart disease')

"""Saving the trained model"""

import pickle

filename = 'trainedmodel1.sav'
pickle.dump(model,open(filename,'wb'))

# loading the saved model
loaded_model = pickle.load(open('trainedmodel1.sav','rb'))

input_data = (62,0,1,138,294,1,1,106,0,1.9,2,3,6)
# change the input data to numpy array
input_data_as_numpy_array = np.asarray(input_data)

# reshaping the numpy array as we are only on instance
input_data_reshaped = input_data_as_numpy_array.reshape(1,-1)
prediction = loaded_model.predict(input_data_reshaped)
print(prediction)

if (prediction[0]==0):
  print('person has not heart disease')
else:
  print('person has heart disease')